import axios, { AxiosError } from 'axios';

/**
 * Handles Axios errors and returns a user-friendly message.
 * @param error - The error caught during Axios request.
 * @returns A user-friendly error message.
 */
function handleAxiosError(error: unknown): string {
    if (axios.isAxiosError(error)) {
        const axiosError = error as AxiosError;
        if (axiosError.response) {
            // The request was made and the server responded with a status code
            // that falls out of the range of 2xx
            return `Request failed with status ${axiosError.response.status}: ${axiosError.response.statusText}`;
        } else if (axiosError.request) {
            // The request was made but no response was received
            return 'No response received from the server. Please try again later.';
        } else {
            // Something happened in setting up the request that triggered an Error
            return `Error in setting up the request: ${axiosError.message}`;
        }
    } else {
        // Not an Axios error
        return 'An unexpected error occurred. Please try again later.';
    }
}

// Usage in your exampleFetching function
export async function exampleFetching(url: string): Promise<void> {
    try {
        const response = await axios(url);
        console.log(response);
    } catch (error) {
        const errorMessage = handleAxiosError(error);
        console.log(errorMessage);
    }
}